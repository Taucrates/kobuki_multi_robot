Atajos terminator

	- control + mayus + O: dividir horizontal
	- control + mayus + E: dividir vertical
	- control + mayus + W: cerrar ventana
	- control + mayus + X: zoom ventana (una unica ventana en terminal)
	- alt + flechas: navegar por las ventanas

Funcionamiento básico en entorno real

	- Poner en marcha la "base station"
		+ launch base_station.launch <global_goals_file_name> <map_name>
			* Dentro de este launch se ejecutan los launch
				1. rviz con el fichero de configuracion
				2. map server
				3. global goals publisher (a partir de un fichero de texto en /param/global_goals)

	- Conectarse por ssh a la nuc del kobuki (mirar ficheros sh para cada kobuki)
		+ ./<POKEMON>_login.sh
		+ contraseña para todos: 12345678
	- Acceder al paquete kobuki_multi_robot
		+ roscd kobuki_multi_robot
			- sincronizar repositorio si es necesario (git pull)
	- Acceder a la carpeta start_and_nav
		+ roscd kobuki_multi_robot/start_and_nav

	- Descripción de los archivos .sh

		+ ./kobuki_start.sh (poner en marcha el kobuki con drivers)
			- En terminal: './kobuki_start'
			- Ejecuta el archivo 'kobuki.launch' pasando por argumentos el nombre (KOBUKI_NAME) y sensor (SENSOR_ATTACHED) del robot definidos en el archivo ~/.bashrc
				* Dentro de este launch se ejecutan los launch 
					1. Drivers del kobuki (minimal.launch)
					2. Sensor del kobuki (kobuki_$SENSOR_ATTACHED.launch)
					3. TFs de kobuki (kobuki_description.launch)

		+ ./kobuki_navigation.sh (poner en marcha el navigation stack [AMCL + global planner + dwa local planner])
			- En terminal './kobuki_navigation -m default'
			- Ejecuta el archivo 'kobuki_navigation.launch' pasando por argumentos el id del kobuki (KOBUKI_ID), el nombre del kobuki (KOBUKI_NAME) y la mission (punto inicial para el AMCL)
				* Dentro de este launch se ejectuan los launch
					1. El AMCL que recibe como argumento el punto inicial del kobuki, es decir, la mision (amcl.launch)
						1.1. La mision esta definida en la carpeta kobuki_multi_robot/param/missions
					2. Global y local planner (move_base.launch)
					3. Velocity smoother (velocity_smoother.launch)
					4. Nodo que escucha objetivos globales (multi_robot_slave.launch)
						[!] Además de leer objetivos globals y comprobar si el ID se corresponde con el del kobuki, llama al servicio de kobuki_X/move_base/clear_costmaps


Funcionamiento básico en entorno simulado

	- Poner en marcha la "base station"
		+ launch base_station.launch
			* Dentro de este launch se ejecutan los launch
				1. rviz con el fichero de configuracion
				2. map server
				3. global goals publisher (a partir de un fichero de texto en /param/global_goals)

	- Poner en marcha la simulación
		+ launch simulacion (simulated_playground.launch)
			* Pone en marcha gazebo y spawnea kobukis (si queremos menos kobukis comentar lineas en spawn_kobukis.launch)
		+ launch set up simulation (set_up_simulation.launch) <- SE TIENE QUE CAMBIAR
			* Pone a los kobukis en el punto de partida según /param/missions
			* Pone en marcha a los nodos de navigation stack para cada kobuki, junto a los nodos de escucha de objetivos globales
	
	- Empezar la mision publicando objetivos globales desde fichero de texto (/param/global_goals)
		+ Desde terminal: rostopic pub /update_global_goals std_msgs/Int8 "data: 1"


Para definir nuevos puntos iniciales y objetivos globales
	- Crear una nueva carpeta con puntos iniciales en param/missions
	- Crear nuevo fichero de objetivos globales en /param/global_goals
	- Actualizar los paquetes en cada kobuki con 'git pull' en la carpeta del paquete kobuki_multi_robot
		* Comprobar el status del repositorio: 'git status'
		* Si hay algún archivo modificado no sincronizado con el respositorio: 'git checkout <archivo>'


Otra informacion relevante

	Tutoriales kobuki:
	http://wiki.ros.org/kobuki/Tutorials


Próximo día:

	- Aumentar frecuencia clear_costmap
	- Aumentar frecuencia actualización costmap  
	- Mirar de aumentar velocidad mínima a 0.05
	- Aumentar tolerancia objetivo global
